/**
 * TRACKER D'√âVOLUTION - Pour ne pas oublier les am√©liorations
 */

export const EVOLUTION_PLAN = {
  PHASE_1: {
    status: 'IN_PROGRESS',
    features: [
      '‚úÖ Domain detection basique',
      '‚úÖ 2 prompts (ecommerce, saas)',
      '‚úÖ Validation simple',
      '‚úÖ 1 retry',
      '‚úÖ Cache m√©moire simple'
    ]
  },
  
  PHASE_2: {
    status: 'TODO',
    plannedDate: 'Semaine 2',
    features: [
      '‚è≥ 4 domaines (+ landing, dashboard)',
      '‚è≥ Chain of thought',
      '‚è≥ Few-shot examples',
      '‚è≥ Cache LRU',
      '‚è≥ Quality enhancement si < 7/10'
    ]
  },
  
  PHASE_3: {
    status: 'TODO',
    plannedDate: 'Mois 2',
    features: [
      '‚è≥ 8+ domaines',
      '‚è≥ Cache s√©mantique',
      '‚è≥ M√©triques compl√®tes',
      '‚è≥ A/B testing prompts',
      '‚è≥ Auto-optimization'
    ]
  }
};

// Fonction pour logger o√π on en est
export function checkEvolution() {
  console.log('üìä BAML System Evolution Status:');
  Object.entries(EVOLUTION_PLAN).forEach(([phase, info]) => {
    console.log(`\n${phase}: ${(info as any).status}`);
    (info as any).features.forEach((f: string) => console.log(`  ${f}`));
  });
}

export function markPhaseComplete(phase: 'PHASE_1' | 'PHASE_2' | 'PHASE_3') {
  (EVOLUTION_PLAN[phase] as any).status = 'COMPLETED';
  console.log(`‚úÖ ${phase} marked as COMPLETED!`);
}

export function getPhaseStatus(phase: 'PHASE_1' | 'PHASE_2' | 'PHASE_3'): string {
  return (EVOLUTION_PLAN[phase] as any).status;
}