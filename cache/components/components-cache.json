{
  "navbar-modern-nextjs": {
    "name": "navbar",
    "style": "modern",
    "tech": "nextjs",
    "version": "1.0.0",
    "code": "'use client';\nimport Link from 'next/link';\n\nexport default function Navbar() {\n  return (\n    <nav className=\"fixed top-0 w-full bg-white/90 backdrop-blur-lg border-b border-gray-200 z-50\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          <Link href=\"/\" className=\"font-bold text-xl text-gray-900\">\n            Logo\n          </Link>\n          <div className=\"hidden md:flex space-x-8\">\n            <Link href=\"/features\" className=\"text-gray-600 hover:text-gray-900 transition-colors\">\n              Features\n            </Link>\n            <Link href=\"/pricing\" className=\"text-gray-600 hover:text-gray-900 transition-colors\">\n              Pricing\n            </Link>\n            <Link href=\"/contact\" className=\"text-gray-600 hover:text-gray-900 transition-colors\">\n              Contact\n            </Link>\n          </div>\n          <div className=\"flex items-center space-x-4\">\n            <Link href=\"/login\" className=\"text-gray-600 hover:text-gray-900 transition-colors\">\n              Login\n            </Link>\n            <Link href=\"/signup\" className=\"bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors\">\n              Sign Up\n            </Link>\n          </div>\n        </div>\n      </div>\n    </nav>\n  );\n}"
  },
  "button-modern-nextjs": {
    "name": "button",
    "code": "import React, { useState } from 'react';\n\ninterface ButtonProps {\n  children: React.ReactNode;\n  onClick?: () => void;\n  variant?: 'primary' | 'secondary';\n  className?: string;\n}\n\nexport const Button: React.FC<ButtonProps> = ({ \n  children, \n  onClick, \n  variant = 'primary',\n  className = '' \n}) => {\n  const [ripples, setRipples] = useState<Array<{ id: number; x: number; y: number }>>([]);\n\n  const handleClick = (e: React.MouseEvent<HTMLButtonElement>) => {\n    const rect = e.currentTarget.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n    const newRipple = { id: Date.now(), x, y };\n    \n    setRipples(prev => [...prev, newRipple]);\n    \n    setTimeout(() => {\n      setRipples(prev => prev.filter(ripple => ripple.id !== newRipple.id));\n    }, 600);\n    \n    onClick?.();\n  };\n\n  const baseClasses = 'relative overflow-hidden px-6 py-3 rounded-lg font-semibold transition-all duration-300 transform hover:scale-105 focus:outline-none focus:ring-2 focus:ring-offset-2';\n  \n  const variantClasses = {\n    primary: 'bg-gradient-to-r from-blue-500 to-purple-600 text-white hover:from-blue-600 hover:to-purple-700 focus:ring-blue-500 shadow-lg hover:shadow-2xl hover:shadow-blue-500/25 animate-pulse-glow',\n    secondary: 'bg-gray-200 text-gray-800 hover:bg-gray-300 focus:ring-gray-500'\n  };\n\n  return (\n    <button \n      className={`${baseClasses} ${variantClasses[variant]} ${className}`}\n      onClick={handleClick}\n    >\n      {children}\n      {ripples.map(ripple => (\n        <span\n          key={ripple.id}\n          className=\"absolute bg-white/30 rounded-full animate-ping\"\n          style={{\n            left: ripple.x - 10,\n            top: ripple.y - 10,\n            width: 20,\n            height: 20,\n            animation: 'ripple 0.6s linear'\n          }}\n        />\n      ))}\n      <style jsx>{`\n        @keyframes ripple {\n          0% { transform: scale(0); opacity: 1; }\n          100% { transform: scale(4); opacity: 0; }\n        }\n        @keyframes pulse-glow {\n          0%, 100% { box-shadow: 0 0 20px rgba(59, 130, 246, 0.5); }\n          50% { box-shadow: 0 0 40px rgba(59, 130, 246, 0.8); }\n        }\n        .animate-pulse-glow {\n          animation: pulse-glow 2s ease-in-out infinite;\n        }\n      `}</style>\n    </button>\n  );\n};",
    "style": "modern",
    "tech": "nextjs",
    "version": "1.0.0"
  },
  "loading-modern-nextjs": {
    "name": "loading",
    "style": "modern",
    "tech": "nextjs",
    "version": "1.0.0",
    "code": "export default function Loading() {\n  return (\n    <div className=\"flex items-center justify-center min-h-[400px]\">\n      <div className=\"relative\">\n        <div className=\"w-12 h-12 border-4 border-gray-200 rounded-full\"></div>\n        <div className=\"w-12 h-12 border-4 border-blue-600 border-t-transparent rounded-full animate-spin absolute top-0 left-0\"></div>\n      </div>\n    </div>\n  );\n}"
  },
  "card-modern-nextjs": {
    "name": "card",
    "code": "import React from 'react';\n\ninterface CardProps {\n  children: React.ReactNode;\n  className?: string;\n  title?: string;\n}\n\nexport const Card: React.FC<CardProps> = ({ children, className = '', title }) => {\n  return (\n    <div className={`group perspective-1000 ${className}`}>\n      <div className=\"relative bg-white/10 backdrop-blur-md border border-white/20 rounded-xl p-6 transition-all duration-500 transform-gpu hover:rotate-y-6 hover:rotate-x-2 hover:scale-105 shadow-xl hover:shadow-2xl\">\n        <div className=\"absolute inset-0 bg-gradient-to-br from-white/20 to-transparent rounded-xl opacity-0 group-hover:opacity-100 transition-opacity duration-300\" />\n        \n        {title && (\n          <h3 className=\"text-xl font-bold mb-4 text-white relative z-10\">\n            {title}\n          </h3>\n        )}\n        \n        <div className=\"relative z-10\">\n          {children}\n        </div>\n        \n        <div className=\"absolute -inset-0.5 bg-gradient-to-r from-pink-600 to-purple-600 rounded-xl opacity-0 group-hover:opacity-20 blur transition-opacity duration-300 -z-10\" />\n      </div>\n      \n      <style jsx>{`\n        .perspective-1000 {\n          perspective: 1000px;\n        }\n        .transform-gpu {\n          transform-style: preserve-3d;\n        }\n        .hover\\:rotate-y-6:hover {\n          transform: rotateY(6deg) rotateX(2deg) scale(1.05);\n        }\n        .hover\\:rotate-x-2:hover {\n          transform: rotateY(6deg) rotateX(2deg) scale(1.05);\n        }\n      `}</style>\n    </div>\n  );\n};",
    "style": "modern",
    "tech": "nextjs",
    "version": "1.0.0"
  },
  "modal-modern-nextjs": {
    "name": "modal",
    "code": "export function Modal({ isOpen, onClose, children }) { if (!isOpen) return null; return <div className='fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50' onClick={onClose}><div className='bg-white rounded-lg p-6 max-w-md w-full mx-4' onClick={(e) => e.stopPropagation()}>{children}</div></div> }",
    "style": "modern",
    "tech": "nextjs",
    "version": "1.0.0"
  },
  "form-modern-nextjs": {
    "name": "form",
    "code": "export function Form({ onSubmit, children }) { return <form onSubmit={onSubmit} className='space-y-4'>{children}</form> } export function Input({ label, ...props }) { return <div><label className='block text-sm font-medium mb-1'>{label}</label><input className='w-full border rounded px-3 py-2' {...props} /></div> } export function Button({ children, type = 'button', ...props }) { return <button type={type} className='bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600' {...props}>{children}</button> }",
    "style": "modern",
    "tech": "nextjs",
    "version": "1.0.0"
  },
  "animatedcounter-modern-nextjs": {
    "name": "animatedcounter",
    "code": "import React, { useState, useEffect } from 'react';\n\ninterface AnimatedCounterProps {\n  end: number;\n  start?: number;\n  duration?: number;\n  prefix?: string;\n  suffix?: string;\n  className?: string;\n}\n\nexport const AnimatedCounter: React.FC<AnimatedCounterProps> = ({\n  end,\n  start = 0,\n  duration = 2000,\n  prefix = '',\n  suffix = '',\n  className = ''\n}) => {\n  const [count, setCount] = useState(start);\n  const [isVisible, setIsVisible] = useState(false);\n\n  useEffect(() => {\n    const observer = new IntersectionObserver(\n      ([entry]) => {\n        if (entry.isIntersecting) {\n          setIsVisible(true);\n        }\n      },\n      { threshold: 0.1 }\n    );\n\n    const element = document.getElementById(`counter-${end}`);\n    if (element) {\n      observer.observe(element);\n    }\n\n    return () => observer.disconnect();\n  }, [end]);\n\n  useEffect(() => {\n    if (!isVisible) return;\n\n    const startTime = Date.now();\n    const startValue = start;\n    const endValue = end;\n    const totalChange = endValue - startValue;\n\n    const updateCounter = () => {\n      const currentTime = Date.now();\n      const elapsedTime = currentTime - startTime;\n      const progress = Math.min(elapsedTime / duration, 1);\n      \n      // Easing function for smooth animation\n      const easeOutQuart = 1 - Math.pow(1 - progress, 4);\n      \n      const currentValue = Math.floor(startValue + (totalChange * easeOutQuart));\n      setCount(currentValue);\n\n      if (progress < 1) {\n        requestAnimationFrame(updateCounter);\n      } else {\n        setCount(endValue);\n      }\n    };\n\n    requestAnimationFrame(updateCounter);\n  }, [isVisible, start, end, duration]);\n\n  return (\n    <span \n      id={`counter-${end}`}\n      className={`inline-block transition-all duration-300 ${className}`}\n    >\n      <span className=\"tabular-nums font-bold\">\n        {prefix}{count.toLocaleString()}{suffix}\n      </span>\n    </span>\n  );\n};",
    "style": "modern",
    "tech": "nextjs",
    "version": "1.0.0"
  },
  "heroparallax-modern-nextjs": {
    "name": "heroparallax",
    "code": "import React, { useEffect, useState } from 'react';\n\ninterface HeroParallaxProps {\n  children: React.ReactNode;\n  height?: string;\n  className?: string;\n}\n\nexport const HeroParallax: React.FC<HeroParallaxProps> = ({\n  children,\n  height = 'h-screen',\n  className = ''\n}) => {\n  const [scrollY, setScrollY] = useState(0);\n  const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 });\n\n  useEffect(() => {\n    const handleScroll = () => {\n      setScrollY(window.scrollY);\n    };\n\n    const handleMouseMove = (e: MouseEvent) => {\n      setMousePosition({\n        x: (e.clientX / window.innerWidth) * 100,\n        y: (e.clientY / window.innerHeight) * 100\n      });\n    };\n\n    window.addEventListener('scroll', handleScroll, { passive: true });\n    window.addEventListener('mousemove', handleMouseMove, { passive: true });\n\n    return () => {\n      window.removeEventListener('scroll', handleScroll);\n      window.removeEventListener('mousemove', handleMouseMove);\n    };\n  }, []);\n\n  return (\n    <div className={`relative overflow-hidden ${height} ${className}`}>\n      {/* Animated gradient background */}\n      <div \n        className=\"absolute inset-0 bg-gradient-to-br from-purple-900 via-blue-900 to-indigo-900\"\n        style={{\n          transform: `translate3d(${scrollY * 0.5}px, ${scrollY * 0.3}px, 0)`,\n          background: `radial-gradient(circle at ${mousePosition.x}% ${mousePosition.y}%, rgba(147, 51, 234, 0.3) 0%, rgba(59, 130, 246, 0.2) 25%, rgba(79, 70, 229, 0.1) 50%, transparent 100%), linear-gradient(135deg, #1e1b4b 0%, #312e81 25%, #1e3a8a 50%, #1e40af 75%, #3730a3 100%)`\n        }}\n      />\n      \n      {/* Floating particles */}\n      <div className=\"absolute inset-0\">\n        {Array.from({ length: 20 }).map((_, i) => (\n          <div\n            key={i}\n            className=\"absolute w-2 h-2 bg-white/20 rounded-full animate-float\"\n            style={{\n              left: `${Math.random() * 100}%`,\n              top: `${Math.random() * 100}%`,\n              transform: `translate3d(${scrollY * (0.1 + i * 0.02)}px, ${scrollY * (0.05 + i * 0.01)}px, 0)`,\n              animationDelay: `${i * 0.2}s`,\n              animationDuration: `${3 + i * 0.5}s`\n            }}\n          />\n        ))}\n      </div>\n\n      {/* Parallax layers */}\n      <div \n        className=\"absolute inset-0 bg-gradient-to-t from-black/50 to-transparent\"\n        style={{\n          transform: `translate3d(0, ${scrollY * 0.2}px, 0)`\n        }}\n      />\n      \n      {/* Content */}\n      <div \n        className=\"relative z-10 h-full flex items-center justify-center\"\n        style={{\n          transform: `translate3d(0, ${scrollY * -0.1}px, 0)`\n        }}\n      >\n        {children}\n      </div>\n      \n      {/* Overlay gradient */}\n      <div className=\"absolute bottom-0 left-0 right-0 h-32 bg-gradient-to-t from-black/80 to-transparent\" />\n      \n      <style jsx>{`\n        @keyframes float {\n          0%, 100% {\n            transform: translateY(0px) rotate(0deg);\n            opacity: 0.7;\n          }\n          50% {\n            transform: translateY(-20px) rotate(180deg);\n            opacity: 1;\n          }\n        }\n        .animate-float {\n          animation: float 3s ease-in-out infinite;\n        }\n      `}</style>\n    </div>\n  );\n};",
    "style": "modern",
    "tech": "nextjs",
    "version": "1.0.0"
  },
  "button-moderne streetwear-typescript": {
    "name": "button",
    "code": "import React, { useState } from 'react';\nimport { cn } from '@/lib/utils';\n\ninterface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  variant?: 'primary' | 'secondary' | 'outline';\n  size?: 'sm' | 'md' | 'lg';\n  children: React.ReactNode;\n}\n\nconst Button: React.FC<ButtonProps> = ({\n  variant = 'primary',\n  size = 'md',\n  children,\n  className,\n  onClick,\n  ...props\n}) => {\n  const [ripples, setRipples] = useState<Array<{ x: number; y: number; id: number }>>([]);\n\n  const createRipple = (event: React.MouseEvent<HTMLButtonElement>) => {\n    const button = event.currentTarget;\n    const rect = button.getBoundingClientRect();\n    const x = event.clientX - rect.left;\n    const y = event.clientY - rect.top;\n    const newRipple = { x, y, id: Date.now() };\n    \n    setRipples(prev => [...prev, newRipple]);\n    \n    setTimeout(() => {\n      setRipples(prev => prev.filter(ripple => ripple.id !== newRipple.id));\n    }, 600);\n    \n    onClick?.(event);\n  };\n\n  const baseClasses = 'relative overflow-hidden font-semibold rounded-lg transition-all duration-300 transform hover:scale-105 active:scale-95 shadow-lg hover:shadow-xl focus:outline-none focus:ring-2 focus:ring-offset-2';\n  \n  const variantClasses = {\n    primary: 'bg-gradient-to-r from-blue-500 to-purple-600 text-white hover:from-blue-600 hover:to-purple-700 focus:ring-blue-500 shadow-blue-500/25 hover:shadow-blue-500/40 animate-pulse-glow',\n    secondary: 'bg-gradient-to-r from-gray-600 to-gray-700 text-white hover:from-gray-700 hover:to-gray-800 focus:ring-gray-500',\n    outline: 'border-2 border-blue-500 text-blue-500 hover:bg-blue-500 hover:text-white focus:ring-blue-500'\n  };\n  \n  const sizeClasses = {\n    sm: 'px-3 py-1.5 text-sm',\n    md: 'px-4 py-2 text-base',\n    lg: 'px-6 py-3 text-lg'\n  };\n\n  return (\n    <button\n      className={cn(\n        baseClasses,\n        variantClasses[variant],\n        sizeClasses[size],\n        className\n      )}\n      onClick={createRipple}\n      {...props}\n    >\n      {children}\n      {ripples.map(ripple => (\n        <span\n          key={ripple.id}\n          className=\"absolute bg-white/30 rounded-full animate-ping\"\n          style={{\n            left: ripple.x - 10,\n            top: ripple.y - 10,\n            width: 20,\n            height: 20,\n            animationDuration: '0.6s'\n          }}\n        />\n      ))}\n      <style jsx>{`\n        @keyframes pulse-glow {\n          0%, 100% { box-shadow: 0 0 20px rgba(59, 130, 246, 0.3); }\n          50% { box-shadow: 0 0 30px rgba(59, 130, 246, 0.6); }\n        }\n        .animate-pulse-glow {\n          animation: pulse-glow 2s ease-in-out infinite;\n        }\n      `}</style>\n    </button>\n  );\n};\n\nexport default Button;",
    "style": "moderne streetwear",
    "tech": "typescript",
    "version": "1.0.0"
  },
  "card-moderne streetwear-typescript": {
    "name": "card",
    "code": "import React from 'react';\nimport { cn } from '@/lib/utils';\n\ninterface CardProps {\n  children: React.ReactNode;\n  className?: string;\n  hover3D?: boolean;\n  glassEffect?: boolean;\n}\n\nconst Card: React.FC<CardProps> = ({\n  children,\n  className,\n  hover3D = true,\n  glassEffect = true\n}) => {\n  const baseClasses = 'rounded-xl border transition-all duration-500 transform-gpu';\n  \n  const glassClasses = glassEffect \n    ? 'backdrop-blur-lg bg-white/10 border-white/20 shadow-xl'\n    : 'bg-white border-gray-200 shadow-lg';\n    \n  const hoverClasses = hover3D \n    ? 'hover:scale-105 hover:rotate-1 hover:-translate-y-2 hover:shadow-2xl perspective-1000'\n    : 'hover:shadow-lg';\n\n  return (\n    <div\n      className={cn(\n        baseClasses,\n        glassClasses,\n        hoverClasses,\n        'group cursor-pointer',\n        className\n      )}\n      style={{\n        transformStyle: 'preserve-3d',\n        perspective: '1000px'\n      }}\n    >\n      <div className=\"relative p-6 h-full transform transition-transform duration-500 group-hover:rotateX-5 group-hover:rotateY-5\">\n        <div className=\"absolute inset-0 bg-gradient-to-br from-white/5 to-transparent rounded-xl opacity-0 group-hover:opacity-100 transition-opacity duration-500\" />\n        <div className=\"relative z-10\">\n          {children}\n        </div>\n        <div className=\"absolute -inset-1 bg-gradient-to-r from-blue-500/20 to-purple-500/20 rounded-xl blur opacity-0 group-hover:opacity-100 transition-opacity duration-500 -z-10\" />\n      </div>\n      <style jsx>{`\n        .perspective-1000 {\n          perspective: 1000px;\n        }\n        .group:hover .rotateX-5 {\n          transform: rotateX(5deg);\n        }\n        .group:hover .rotateY-5 {\n          transform: rotateY(5deg);\n        }\n      `}</style>\n    </div>\n  );\n};\n\nexport default Card;",
    "style": "moderne streetwear",
    "tech": "typescript",
    "version": "1.0.0"
  },
  "animatedcounter-moderne streetwear-typescript": {
    "name": "animatedcounter",
    "code": "import React, { useEffect, useState, useRef } from 'react';\n\ninterface AnimatedCounterProps {\n  end: number;\n  start?: number;\n  duration?: number;\n  delay?: number;\n  prefix?: string;\n  suffix?: string;\n  className?: string;\n  decimals?: number;\n}\n\nconst AnimatedCounter: React.FC<AnimatedCounterProps> = ({\n  end,\n  start = 0,\n  duration = 2000,\n  delay = 0,\n  prefix = '',\n  suffix = '',\n  className = '',\n  decimals = 0\n}) => {\n  const [count, setCount] = useState(start);\n  const [isVisible, setIsVisible] = useState(false);\n  const countRef = useRef<HTMLSpanElement>(null);\n  const frameRef = useRef<number>();\n  const startTimeRef = useRef<number>();\n\n  const easeOutQuart = (t: number): number => {\n    return 1 - Math.pow(1 - t, 4);\n  };\n\n  const animate = (timestamp: number) => {\n    if (!startTimeRef.current) {\n      startTimeRef.current = timestamp + delay;\n    }\n\n    const elapsed = timestamp - startTimeRef.current;\n    \n    if (elapsed < 0) {\n      frameRef.current = requestAnimationFrame(animate);\n      return;\n    }\n\n    const progress = Math.min(elapsed / duration, 1);\n    const easedProgress = easeOutQuart(progress);\n    const currentCount = start + (end - start) * easedProgress;\n    \n    setCount(currentCount);\n\n    if (progress < 1) {\n      frameRef.current = requestAnimationFrame(animate);\n    }\n  };\n\n  useEffect(() => {\n    const observer = new IntersectionObserver(\n      ([entry]) => {\n        if (entry.isIntersecting && !isVisible) {\n          setIsVisible(true);\n        }\n      },\n      { threshold: 0.1 }\n    );\n\n    if (countRef.current) {\n      observer.observe(countRef.current);\n    }\n\n    return () => {\n      if (countRef.current) {\n        observer.unobserve(countRef.current);\n      }\n    };\n  }, [isVisible]);\n\n  useEffect(() => {\n    if (isVisible) {\n      startTimeRef.current = undefined;\n      frameRef.current = requestAnimationFrame(animate);\n    }\n\n    return () => {\n      if (frameRef.current) {\n        cancelAnimationFrame(frameRef.current);\n      }\n    };\n  }, [isVisible, end, start, duration, delay]);\n\n  const displayValue = decimals > 0 \n    ? count.toFixed(decimals)\n    : Math.floor(count).toString();\n\n  return (\n    <span \n      ref={countRef}\n      className={`inline-block transition-all duration-300 ${className}`}\n    >\n      <span className=\"tabular-nums font-bold\">\n        {prefix}{displayValue}{suffix}\n      </span>\n    </span>\n  );\n};\n\nexport default AnimatedCounter;",
    "style": "moderne streetwear",
    "tech": "typescript",
    "version": "1.0.0"
  },
  "heroparallax-moderne streetwear-typescript": {
    "name": "heroparallax",
    "code": "import React, { useEffect, useState, useRef } from 'react';\nimport { cn } from '@/lib/utils';\n\ninterface HeroParallaxProps {\n  children: React.ReactNode;\n  className?: string;\n  height?: string;\n  backgroundImage?: string;\n}\n\nconst HeroParallax: React.FC<HeroParallaxProps> = ({\n  children,\n  className,\n  height = '100vh',\n  backgroundImage\n}) => {\n  const [scrollY, setScrollY] = useState(0);\n  const heroRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const handleScroll = () => {\n      setScrollY(window.scrollY);\n    };\n\n    const throttledHandleScroll = () => {\n      requestAnimationFrame(handleScroll);\n    };\n\n    window.addEventListener('scroll', throttledHandleScroll, { passive: true });\n    \n    return () => {\n      window.removeEventListener('scroll', throttledHandleScroll);\n    };\n  }, []);\n\n  const parallaxOffset = scrollY * 0.5;\n  const opacityValue = Math.max(0, 1 - scrollY / 800);\n\n  return (\n    <div \n      ref={heroRef}\n      className={cn(\n        'relative overflow-hidden flex items-center justify-center',\n        className\n      )}\n      style={{ height }}\n    >\n      {/* Animated gradient background */}\n      <div \n        className=\"absolute inset-0 bg-gradient-to-br from-purple-900 via-blue-900 to-indigo-900\"\n        style={{\n          transform: `translateY(${parallaxOffset}px)`,\n          opacity: opacityValue\n        }}\n      />\n      \n      {/* Animated overlay gradient */}\n      <div \n        className=\"absolute inset-0 bg-gradient-to-t from-black/50 via-transparent to-purple-500/20\"\n        style={{\n          transform: `translateY(${parallaxOffset * 0.3}px)`\n        }}\n      />\n      \n      {/* Background image with parallax */}\n      {backgroundImage && (\n        <div \n          className=\"absolute inset-0 bg-cover bg-center bg-no-repeat\"\n          style={{\n            backgroundImage: `url(${backgroundImage})`,\n            transform: `translateY(${parallaxOffset * 0.7}px) scale(1.1)`,\n            opacity: opacityValue * 0.3\n          }}\n        />\n      )}\n      \n      {/* Floating particles */}\n      <div className=\"absolute inset-0\">\n        {[...Array(20)].map((_, i) => (\n          <div\n            key={i}\n            className=\"absolute w-2 h-2 bg-white/20 rounded-full animate-float\"\n            style={{\n              left: `${Math.random() * 100}%`,\n              top: `${Math.random() * 100}%`,\n              animationDelay: `${Math.random() * 5}s`,\n              animationDuration: `${3 + Math.random() * 4}s`,\n              transform: `translateY(${parallaxOffset * (0.1 + Math.random() * 0.2)}px)`\n            }}\n          />\n        ))}\n      </div>\n      \n      {/* Content with counter-parallax */}\n      <div \n        className=\"relative z-10 text-center px-4 max-w-4xl mx-auto\"\n        style={{\n          transform: `translateY(${-parallaxOffset * 0.2}px)`,\n          opacity: opacityValue\n        }}\n      >\n        {children}\n      </div>\n      \n      {/* Glowing orbs */}\n      <div \n        className=\"absolute top-1/4 left-1/4 w-64 h-64 bg-purple-500/20 rounded-full blur-3xl animate-pulse\"\n        style={{\n          transform: `translateY(${parallaxOffset * 0.4}px)`\n        }}\n      />\n      <div \n        className=\"absolute bottom-1/4 right-1/4 w-96 h-96 bg-blue-500/20 rounded-full blur-3xl animate-pulse\"\n        style={{\n          transform: `translateY(${parallaxOffset * 0.6}px)`,\n          animationDelay: '1s'\n        }}\n      />\n      \n      <style jsx>{`\n        @keyframes float {\n          0%, 100% {\n            transform: translateY(0px) rotate(0deg);\n          }\n          33% {\n            transform: translateY(-20px) rotate(120deg);\n          }\n          66% {\n            transform: translateY(10px) rotate(240deg);\n          }\n        }\n        .animate-float {\n          animation: float linear infinite;\n        }\n      `}</style>\n    </div>\n  );\n};\n\nexport default HeroParallax;",
    "style": "moderne streetwear",
    "tech": "typescript",
    "version": "1.0.0"
  }
}